//
//  SignUpViewController.swift
//  SimpleMeet
//
//  Created by Дмитрий Федоринов on 21.07.2020.
//  Copyright (c) 2020 Дмитрий Федоринов. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class SignUpViewController: UIViewController {

    // MARK: - Dependencies
    
    var presenter: SignUpPresenterProtocol!
    let configurator: SignUpAssemblyProtocol = SignUpAssembly()
    let viewsFactory: LoginInAppViewsFactoryProtocol = LoginInAppViewsFactory()
    
    // MARK: - Properties
    
    // MARK: - LifeStyle ViewController
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configurator.configure(with: self)
        createAndSetupViews()
        presenter.configureView()
        
        
        addKeyBoardNotification()
        addGestureRecongizerContentView()
        
    }
    
    // MARK: - Setup Views
    
    lazy var signUpScrollView: UIScrollView = UIScrollView()
    lazy var contentInScrollView: UIView = UIView()
    
    var signUpTitleImageView: UIImageView!
    
    var nameTextField: MaterialTextField!
    var emailTextField: MaterialTextField!
    var passwordTextField: MaterialTextField!
    var confirmPasswordTextField: MaterialTextField!
    
    var signUpButton: MaterialButton!
    
    var alreadyOnBoardLabel: UILabel!
    var loginButton: MaterialButton!
    
    func createAndSetupViews() {
        view.backgroundColor = UIColor.Pallete.white
        
        signUpTitleImageView = viewsFactory.buildTitleImageViewWith(image: .registration)
        nameTextField = viewsFactory.buildAppTextField(placeHolderText: "Name".localized(with: .loginInAppFlow),
                                                        delegate: self)
        emailTextField = viewsFactory.buildAppTextField(placeHolderText: "Email".localized(with: .loginInAppFlow),
                                                         delegate: self)
        passwordTextField = viewsFactory.buildAppTextField(placeHolderText: "Password".localized(with: .loginInAppFlow),
                                                            delegate: self)
        passwordTextField.isSecureTextEntry = true
        confirmPasswordTextField = viewsFactory.buildAppTextField(placeHolderText: "Confirm Password".localized(with: .loginInAppFlow),
                                                                   delegate: self)
        confirmPasswordTextField.isSecureTextEntry = true
        
        signUpButton = viewsFactory.buildStandartButton(text: "Sign up".localized(with: .loginInAppFlow))
        alreadyOnBoardLabel = viewsFactory.buildStandartLabel(text: "Already onboard?".localized(with: .loginInAppFlow))
        alreadyOnBoardLabel.textColor = UIColor.Pallete.blackWith(alpha: 0.4)
        loginButton = viewsFactory.buildStandartButton(text: "Login".localized(with: .loginInAppFlow))
        
        setupConstraints()
    }

    
    // MARK: - Keyboard with scrollView setup

    private var activeField: UITextField?
    private var lastOffset: CGPoint!
    
    private func addKeyBoardNotification() {
        NotificationCenter.default.addObserver(self,
                                               selector: #selector(keyboard),
                                               name: UIResponder.keyboardWillHideNotification,
                                               object: nil)
        NotificationCenter.default.addObserver(self,
                                               selector: #selector(keyboard),
                                               name: UIResponder.keyboardWillChangeFrameNotification,
                                               object: nil)
    }
    
    private func addGestureRecongizerContentView() {
        self.contentInScrollView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(returnTextView(gesture:))))
    }
    
    @objc func returnTextView(gesture: UIGestureRecognizer) {
        guard activeField != nil else { return }
        activeField?.resignFirstResponder()
        activeField = nil
    }

    @objc func keyboard(notification: Notification) {
        guard let userInfo = notification.userInfo else { return }
        let keyboardScreenEndFrame = (userInfo[UIResponder.keyboardFrameEndUserInfoKey] as! NSValue).cgRectValue
        let keyboardViewEndFrame = view.convert(keyboardScreenEndFrame, to: view.window)
        
        if (notification.name == UIResponder.keyboardWillHideNotification) {
            signUpScrollView.contentInset = UIEdgeInsets.zero
        } else {
            signUpScrollView.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: keyboardViewEndFrame.height, right: 0)
        }
        
        signUpScrollView.scrollIndicatorInsets = signUpScrollView.contentInset
    }
    
    func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool {
        activeField = textField
        lastOffset = self.signUpScrollView.contentOffset
        return true
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        activeField?.resignFirstResponder()
        activeField = nil
        return true
    }

}

// MARK: - Extensions

// MARK: - SignUpViewProtocol

extension SignUpViewController: SignUpViewProtocol {
    
}

// MARK: - UITextFieldDelegate

extension SignUpViewController: UITextFieldDelegate {
    
}

// MARK: - SwiftUI

import SwiftUI

struct SignUpViewControllerProvider: PreviewProvider {
    static var previews: some View {
        ContainerView().edgesIgnoringSafeArea(.all)
    }
    struct ContainerView: UIViewControllerRepresentable {
        typealias UIViewControllerType = SignUpViewController
        
        let viewController = SignUpViewController()
        
        func makeUIViewController(context: Context) -> SignUpViewController {
            return viewController
        }
        
        func updateUIViewController(_ uiViewController: SignUpViewController, context: Context) {
            
        }
    }
}
