//
//  SignInViewController.swift
//  SimpleMeet
//
//  Created by Дмитрий Федоринов on 21.07.2020.
//  Copyright (c) 2020 Дмитрий Федоринов. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import SnapKit

final class SignInViewController: UIViewController, UITextFieldDelegate {

    // MARK: - Dependencies
    
    var presenter: SignInPresenterProtocol!
    let configurator: SignInAssemblyProtocol = SignInAssembly()
    let viewsFactory: LoginInAppViewsFactoryProtocol = LoginInAppViewsFactory()
    
    // MARK: - Properties
    
    // MARK: - LifeStyle ViewController
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configurator.configure(with: self)
        createAndSetupViews()
        presenter.configureView()
        
        addKeyBoardNotification()
        addGestureRecongizerContentView()
    }
    
    // MARK: - Setup Views
    
    lazy var signInScrollView: UIScrollView = UIScrollView()
    lazy var contentInScrollView: UIView = UIView()
    
    var signInTitleImageView: UIImageView!
    
    var loginWithLabel: UILabel!
    var socialButtonsStackView: UIStackView!
    
    var orLabel: UILabel!
    
    var emailTextField: MaterialTextField!
    var passwordTextField: MaterialTextField!
    
    var loginButton: MaterialButton!
    
    var needAnAccountLabel: UILabel!
    var signUpButton: MaterialButton!
    
    func createAndSetupViews() {
        view.backgroundColor = UIColor.Pallete.white
        
        signInTitleImageView = viewsFactory.buildTitleImageViewWith(image: .authorization)
        
        loginWithLabel = viewsFactory.buildLoginInAppStandartLabel(text: "Login with:".localized())
        socialButtonsStackView = viewsFactory.buildSocialButtonsStackView()
        
        orLabel = viewsFactory.buildLoginInAppStandartLabel(text: "or".localized())
        
        emailTextField = viewsFactory.buildLoginInAppTextField(placeHolderText: "Email".localized(),
                                                         delegate: self)
        passwordTextField = viewsFactory.buildLoginInAppTextField(placeHolderText: "Password".localized(),
                                                            delegate: self)
        
        loginButton = viewsFactory.buildLoginInAppStandartButton(text: "Login".localized())
        
        needAnAccountLabel = viewsFactory.buildLoginInAppStandartLabel(text: "Need an account?".localized())
        signUpButton = viewsFactory.buildLoginInAppStandartButton(text: "Sign up".localized())
        
        setupConstraints()
    }
    
    // MARK: Setup Constraints
    
    func setupConstraints() {
        
        view.addSubview(signInScrollView)
        signInScrollView.addSubview(contentInScrollView)
        contentInScrollView.addSubviews(views: [signInTitleImageView,
                                                loginWithLabel,
                                                socialButtonsStackView,
                                                orLabel,
                                                emailTextField,
                                                passwordTextField,
                                                loginButton,
                                                needAnAccountLabel,
                                                signUpButton])
        
        let height = view.frame.height
        let width = view.frame.width
        let viewsSpacing = height*0.035
        let indent = width*0.1
            
        // signInScrollView constraints
        signInScrollView.snp.makeConstraints { make in
            make.top.equalTo(view.safeAreaLayoutGuide)
            make.leading.equalToSuperview()
            make.trailing.equalToSuperview()
            make.bottom.equalTo(view.safeAreaLayoutGuide)
        }
        
        // contentInScrollView constraints
        contentInScrollView.snp.makeConstraints { make in
            make.leading.equalToSuperview()
            make.trailing.equalToSuperview()
            make.width.equalToSuperview()
            make.height.equalToSuperview()
            make.top.equalToSuperview()
            make.bottom.equalToSuperview()
        }
        
        // signInTitleImageView constraints
        signInTitleImageView.snp.makeConstraints { make in
            make.top.equalToSuperview().offset(height*0.1)
            make.width.equalToSuperview().multipliedBy(0.7)
            make.centerX.equalToSuperview()
        }
        
        // loginWithLabel constraints
        loginWithLabel.snp.makeConstraints { make in
            make.top.equalTo(signInTitleImageView.snp.bottom).offset(viewsSpacing*2)
            make.leading.equalToSuperview().offset(indent)
            make.trailing.equalToSuperview().offset(-indent)
        }
        
        // socialButtonsStackView constraints
        socialButtonsStackView.snp.makeConstraints { make in
            make.top.equalTo(loginWithLabel.snp.bottom).offset(viewsSpacing)
            make.leading.equalToSuperview().offset(indent*0.5)
            make.trailing.equalToSuperview().offset(-indent*0.5)
            make.height.equalTo(height*0.13)
        }
        
        // orLabel constraints
        orLabel.snp.makeConstraints { make in
            make.top.equalTo(socialButtonsStackView.snp.bottom).offset(viewsSpacing)
            make.leading.equalToSuperview().offset(indent)
            make.trailing.equalToSuperview().offset(-indent)
        }
        
        // emailTextField constraints
        emailTextField.snp.makeConstraints { make in
            make.top.equalTo(orLabel.snp.bottom).offset(viewsSpacing*1.25)
            make.leading.equalToSuperview().offset(indent)
            make.trailing.equalToSuperview().offset(-indent)
        }
        
        // passwordTextField constraints
        passwordTextField.snp.makeConstraints { make in
            make.top.equalTo(emailTextField.snp.bottom).offset(viewsSpacing*1.25)
            make.leading.equalToSuperview().offset(indent)
            make.trailing.equalToSuperview().offset(-indent)
        }
        
        // loginButton constraints
        loginButton.snp.makeConstraints { make in
            make.top.equalTo(passwordTextField.snp.bottom).offset(viewsSpacing*1.5)
            make.leading.equalToSuperview().offset(indent)
            make.trailing.equalToSuperview().offset(-indent)
        }
        
        // needAnAccountLabel constraints
        needAnAccountLabel.snp.makeConstraints { make in
            make.top.equalTo(loginButton.snp.bottom).offset(viewsSpacing)
            make.leading.equalToSuperview().offset(indent)
            make.trailing.equalToSuperview().offset(-indent)
        }
        
        // signUpButton constraints
        signUpButton.snp.makeConstraints { make in
            make.top.equalTo(needAnAccountLabel.snp.bottom).offset(viewsSpacing)
            make.leading.equalToSuperview().offset(indent)
            make.trailing.equalToSuperview().offset(-indent)
        }
        
    }
    
    // MARK: - Keyboard with scrollView setup

    private var activeField: UITextField?
    private var lastOffset: CGPoint!
    
    private func addKeyBoardNotification() {
        NotificationCenter.default.addObserver(self,
                                               selector: #selector(keyboard),
                                               name: UIResponder.keyboardWillHideNotification,
                                               object: nil)
        NotificationCenter.default.addObserver(self,
                                               selector: #selector(keyboard),
                                               name: UIResponder.keyboardWillChangeFrameNotification,
                                               object: nil)
    }
    
    private func addGestureRecongizerContentView() {
        self.contentInScrollView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(returnTextView(gesture:))))
    }
    
    @objc func returnTextView(gesture: UIGestureRecognizer) {
        guard activeField != nil else { return }
        activeField?.resignFirstResponder()
        activeField = nil
    }

    @objc func keyboard(notification: Notification) {
        guard let userInfo = notification.userInfo else { return }
        let keyboardScreenEndFrame = (userInfo[UIResponder.keyboardFrameEndUserInfoKey] as! NSValue).cgRectValue
        let keyboardViewEndFrame = view.convert(keyboardScreenEndFrame, to: view.window)
        
        if (notification.name == UIResponder.keyboardWillHideNotification) {
            signInScrollView.contentInset = UIEdgeInsets.zero
        } else {
            signInScrollView.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: keyboardViewEndFrame.height, right: 0)
        }
        
        signInScrollView.scrollIndicatorInsets = signInScrollView.contentInset
    }
    
    func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool {
        activeField = textField
        lastOffset = self.signInScrollView.contentOffset
        return true
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        activeField?.resignFirstResponder()
        activeField = nil
        return true
    }


}

// MARK: - Extensions

// MARK: - SignInViewProtocol

extension SignInViewController: SignInViewProtocol {
    
}

// MARK: - SwiftUI

import SwiftUI

struct SignInViewControllerProvider: PreviewProvider {
    static var previews: some View {
        ContainerView().edgesIgnoringSafeArea(.all)
    }
    struct ContainerView: UIViewControllerRepresentable {
        typealias UIViewControllerType = SignInViewController
        
        let viewController = SignInViewController()
        
        func makeUIViewController(context: Context) -> SignInViewController {
            return viewController
        }
        
        func updateUIViewController(_ uiViewController: SignInViewController, context: Context) {
            
        }
    }
}
