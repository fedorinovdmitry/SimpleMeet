//
//  MyChatsListViewController.swift
//  SimpleMeet
//
//  Created by –î–º–∏—Ç—Ä–∏–π –§–µ–¥–æ—Ä–∏–Ω–æ–≤ on 19.10.2020.
//  Copyright (c) 2020 –î–º–∏—Ç—Ä–∏–π –§–µ–¥–æ—Ä–∏–Ω–æ–≤. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit

final class MyChatsListViewController: UIViewController {
    
    // MARK: - Custom types
    
    // MARK: - Public Properties
    
    var presenter: MyChatsListPresenterProtocol!
    let configurator: MyChatsListAssemblyProtocol = MyChatsListAssembly()
    
    
    let activeChats: [MChat] = [
        MChat(userName: "Alexey", userImage: "human1", lastMessage: "How are you?"),
        MChat(userName: "Bob", userImage: "human2", lastMessage: "How are you?"),
        MChat(userName: "Misha", userImage: "human3", lastMessage: "How are you?"),
        MChat(userName: "Mila", userImage: "human4", lastMessage: "How are you?"),
        MChat(userName: "fer", userImage: "4", lastMessage: "How are you?"),
        MChat(userName: "fer", userImage: "4", lastMessage: "How are you?"),
        MChat(userName: "fer", userImage: "4", lastMessage: "How are you?"),
        MChat(userName: "fer", userImage: "4", lastMessage: "How are you?")
    ]
    
    let waitingChats: [MChat] = [
        MChat(userName: "Petr", userImage: "human5", lastMessage: "How are you?"),
        MChat(userName: "Kisa", userImage: "human6", lastMessage: "How are you?"),
        MChat(userName: "Loshk", userImage: "human7", lastMessage: "How are you?"),
        MChat(userName: "Foniy", userImage: "human2", lastMessage: "How are you?"),
        MChat(userName: "Foniy", userImage: "human2", lastMessage: "How are you?"),
        MChat(userName: "Foniy", userImage: "human2", lastMessage: "How are you?"),
        MChat(userName: "Foniy", userImage: "human2", lastMessage: "How are you?")
    ]
    
    // MARK: - Private Properties
    
    
    // MARK: - LifeStyle ViewController
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configurator.configure(with: self)
        createAndSetupViews()
        presenter.configureView()
        
        
    }
    
    // MARK: - Setup Views
    
    private func createAndSetupViews() {
        
        setupSearchBar()
        setupCollectionView()
        
    }
    
    
    // MARK: Set up SearchBar

    private func setupSearchBar() {
        navigationController?.navigationBar.barTintColor = UIColor.Pallete.white
        navigationController?.navigationBar.shadowImage = UIImage()
        
        let searchController = UISearchController(searchResultsController: nil)
        searchController.searchBar.tintColor = UIColor.Pallete.lightGreen
        searchController.searchBar.searchTextField.backgroundColor = UIColor.Pallete.gray
        navigationItem.searchController = searchController
        
//        navigationItem.hidesSearchBarWhenScrolling = false
        searchController.hidesNavigationBarDuringPresentation = false
        searchController.obscuresBackgroundDuringPresentation = false
        searchController.searchBar.delegate = self
    }
    
    // MARK: Set up CollectionView
    
    var collectionView: UICollectionView!
    private var dataSource: UICollectionViewDiffableDataSource<Section, MChat>?
    
    private func setupCollectionView() {
        collectionView = UICollectionView(frame: view.bounds,
                                          collectionViewLayout: createCompositionalLayout())
        collectionView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        collectionView.backgroundColor = UIColor.Pallete.white
        
        view.addSubview(collectionView)
        
        collectionView.register(SectionHeader.self,
                                forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader,
                                withReuseIdentifier: SectionHeader.reuseId)
        collectionView.register(WaitingChatCell.self,
                                forCellWithReuseIdentifier: WaitingChatCell.reuseId)
        collectionView.register(ActiveChatCell.self,
                                forCellWithReuseIdentifier: ActiveChatCell.reuseId)
        
        createDataSource()
        
    }
    
    private enum Section: Int, CaseIterable {
        case waitingChats
        case activeChats
        
        var headerDescription: String {
            switch self {
            case .waitingChats:
                return "Waiting chats".localized(with: .mainFlow)
            case .activeChats:
                return "Active chats".localized(with: .mainFlow)
            }
        }
            
        
    }
    
    private func reloadData() {
        var snapshot = NSDiffableDataSourceSnapshot<Section, MChat>()
        
        snapshot.appendSections([.waitingChats, .activeChats])
        snapshot.appendItems(waitingChats, toSection: .waitingChats)
        snapshot.appendItems(activeChats, toSection: .activeChats)
        
        
        dataSource?.apply(snapshot, animatingDifferences: true)
    }
    
    // MARK: - Public methods
    
    // MARK: - Private methods

}

// MARK: - Extensions

// MARK: - MyChatsListViewProtocol

extension MyChatsListViewController: MyChatsListViewProtocol {
    
}

// MARK: - UISearchBarDelegate

extension MyChatsListViewController: UISearchBarDelegate {
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        print(searchText)
    }
}

// MARK: - DataSource

extension MyChatsListViewController {
    
    private func configure<T: SelfConfigureCell>(cellType: T.Type,
                                                 with value: MChat,
                                                 for indexPath: IndexPath) -> T {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellType.reuseId,
                                                            for: indexPath) as? T
        else { fatalError("Unable to dequeue \(cellType)")}
        
        cell.configure(with: value)
        return cell
        
    }

    
    private func createDataSource() {
        dataSource = UICollectionViewDiffableDataSource<Section, MChat>(collectionView: collectionView,
                                                                        cellProvider:
                                                                            { (collectionView,
                                                                               indexPath,
                                                                               chat)
                                                                                -> UICollectionViewCell? in
            guard let section = Section(rawValue: indexPath.section) else {
                print("error with section's index")
                return nil
            }
            switch section {
            case .waitingChats:
                return self.configure(cellType: WaitingChatCell.self, with: chat, for: indexPath)
            case .activeChats:
                return self.configure(cellType: ActiveChatCell.self, with: chat, for: indexPath)
            }
        })
        
        dataSource?.supplementaryViewProvider = {collectionView, kind, indexPath in
            guard let sectionHeader = collectionView.dequeueReusableSupplementaryView(ofKind: kind,
                                                                                      withReuseIdentifier: SectionHeader.reuseId,
                                                                                      for: indexPath) as? SectionHeader
            else { fatalError("Cannot create new section header")}
            guard let section = Section(rawValue: indexPath.section)
            else { fatalError("Unknown section kind")}
            sectionHeader.configure(text: section.headerDescription)
            
            return sectionHeader
        }
        reloadData()
    }
    
}

// MARK: - Setup Layout

extension MyChatsListViewController {
    
    private func createCompositionalLayout() -> UICollectionViewLayout {
        
        let layout = UICollectionViewCompositionalLayout { (sectionIndex, layoutEnvironment) -> NSCollectionLayoutSection? in
            
            guard let section = Section(rawValue: sectionIndex) else {
                print("error with section's index")
                return nil
            }
            
            switch section {
            case .waitingChats:
                return self.createWaitingChats()
            case .activeChats:
                return self.createActiveChats()
            }
        }
        
        let config = UICollectionViewCompositionalLayoutConfiguration()
        config.interSectionSpacing = UIDevice.giveSizeForCurrentDevice().height / 50 //—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏
        layout.configuration = config
        
        return layout
    }
    
    private func createWaitingChats() -> NSCollectionLayoutSection {
        let deviceHeight = UIDevice.giveSizeForCurrentDevice().height
        let deviceWidth = UIDevice.giveSizeForCurrentDevice().width
        let itemHeight = deviceHeight / 10
        let itemSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1),
                                              heightDimension: .fractionalHeight(1))
        let item = NSCollectionLayoutItem(layoutSize: itemSize)
        
        let groupSize = NSCollectionLayoutSize(widthDimension: .absolute(itemHeight),
                                               heightDimension: .absolute(itemHeight))
        
        let group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize,
                                                       subitems: [item])
        
        let section = NSCollectionLayoutSection(group: group)
        section.orthogonalScrollingBehavior = .continuous
        section.interGroupSpacing = UIDevice.giveSizeForCurrentDevice().width / 25.8
        section.contentInsets = NSDirectionalEdgeInsets.init(top: deviceHeight/56,
                                                             leading: deviceWidth/23,
                                                             bottom: 0,
                                                             trailing: deviceWidth/23)
        section.boundarySupplementaryItems = [createSectionHeader()]
        
        return section
    }
    
    private func createActiveChats() -> NSCollectionLayoutSection {
        let deviceHeight = UIDevice.giveSizeForCurrentDevice().height
        let deviceWidth = UIDevice.giveSizeForCurrentDevice().width
        let itemHeight = deviceHeight / 11
        let itemSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1),
                                              heightDimension: .fractionalHeight(1))
        let item = NSCollectionLayoutItem(layoutSize: itemSize)
        
        let groupSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1),
                                               heightDimension: .absolute(itemHeight))
        
        let group = NSCollectionLayoutGroup.vertical(layoutSize: groupSize,
                                                     subitems: [item])
        
        
        let section = NSCollectionLayoutSection(group: group)
        section.interGroupSpacing = UIDevice.giveSizeForCurrentDevice().width / 50
        section.contentInsets = NSDirectionalEdgeInsets.init(top: deviceHeight/50 ,
                                                             leading: deviceWidth/23,
                                                             bottom: 0,
                                                             trailing: deviceWidth/23)
        section.boundarySupplementaryItems = [createSectionHeader()]
        return section
    }
    
    private func createSectionHeader() -> NSCollectionLayoutBoundarySupplementaryItem {
        
        let sectionHeaderSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1),
                                                       heightDimension: .estimated(1))
        let sectionHeader = NSCollectionLayoutBoundarySupplementaryItem(layoutSize: sectionHeaderSize,
                                                                        elementKind: UICollectionView.elementKindSectionHeader,
                                                                        alignment: .top)
        return sectionHeader
    }
    
}
// MARK: - SwiftUI

import SwiftUI

struct MyChatsListViewViewControllerProvider: PreviewProvider {
    
    static var previews: some View {
        ContainerView().edgesIgnoringSafeArea(.all)
    }
    
    struct ContainerView: UIViewControllerRepresentable {
        typealias UIViewControllerType = MainTabBarController
        
        let viewController = MainTabBarController()
        
        func makeUIViewController(context: Context) -> MainTabBarController {
            return viewController
        }
        
        func updateUIViewController(_ uiViewController: MainTabBarController, context: Context) {
            
        }
    }
    
}
